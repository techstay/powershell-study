# ----------------------------------- 定义数组 -------------------------------------

$a = 1, 2, 3, 4, 5
[int[]] $b = @(1, 2, 3, 4, 5, 6, 7)
$c = 1..10
$d = @(
  'abc'
  'def'
  'geh'
  'ijk'
)

# ----------------------------------- 数组索引 -------------------------------------
$a[1]
$b[2, 3, 4]
$b[0..3]
$b[-1]
$b.Count

# 将索引2的值改为20
$a.SetValue(20, 2)
# 在末尾添加元素
$a += 6
# 连接数组
$c = $a + $b

# 将数组元素清零，长度维持不变
$a.Clear()

# ------------------------------------ 操作 --------------------------------------

# foreach，对每个元素进行操作，有多种形式
# 接表达式，对每个元素执行操作
@(1..3).ForEach({ $_ * $_ })
# 接类型，对每个元素执行转换
@('2012-1-1', '2021-1-1').ForEach( [DateTime] )
# 接函数，对每个元素调用函数
@('a b c d e' -split ' ').ForEach('ToUpper')

# where，对每个元素进行判断，选出符合条件的元素
@(1..3).Where({ $_ -eq 2 })
# where可以有多种条件模式
# first模式，选出符合条件的前几个
@(1..10).Where({ $_ -gt 5 }, 'first', 3)
# last模式，选出符合条件的后几个
@(1..10).Where({ $_ -gt 5 }, 'last', 3)
# until模式，遍历所有元素，到条件为真是返回之前的所有元素
@(1..10).Where({ $_ -gt 5 }, 'until')
# skipUntil模式，跳过条件为真的所有元素，然后返回剩余的元素
PrintArray @(1..10).Where({ $_ -gt 5 }, 'skipUntil')
# split模式，将元素分为两部分，符合条件的和不符合条件的
$greaterThan5, $lessAndEqual5 = @(1..10).Where({ $_ -gt 5 }, 'split')

# ------------------------------------ 运算符 -------------------------------------

@(1, 2, 3, 4) -join ','
# 无分隔符直接连接所有内容
-join @(1, 2, 3, 4)

@('1', '2', '3', '4', '11', '12') -replace '1', '5'
@(1..5) -split 2
@(1..5) -contains 6
